xlattice_go/protocol/aes_cnx

2015-04-25
    * drop Key1 from AesSession data structure                          * DONE
    * rename Key2 Key                                                   * DONE
    * IV should not be returned by Encrypt or Decrypt                   * DONE
    * helloAndReply functions should return pointer to AesSession       * DONE

2015-04-24
    * simplify life, minimize confusion: change code as necessary so    * DONE
        that function names etc use Encrypt/Decrypt, allowing           * DONE
        Encode/Decode to be used for name non-crypto functionality,     * DONE
        such as serializing/deserialzing protobuf messages              * DONE

    * then rework helloAndReply so that the client and server first     * DONE
        create a one-shot AES half-circuit to convery Key1 from server  * DONE
        to client and then a pair of half-circuits based on Key2 for    * DONE
        further comms; these half circuits are created using            * DONE
        NewAesSession()
    * we then need a joint test of both helloAndReply and AesSession.
        - A (client) uses helloAndReply OAEP to pass AES Key1 to B,
            then sets up its end of a one-shot AES half-circuit
        - B uses the other end of the one-shot half-circuit to send 
            Key2 to A, then sets up its end of the permanent circuit 
            (using Key2)
        - A sets up its end of the Key2 circuit
        - then the two exchange random messages for a few iterations
  

2015-04-16
    * drop iv1 from message client sends to server (it's prefixed to    * DONE
        the encrypted message as plaintext!)                            * DONE
    * so iv1 dropped from ClientEncodeHello return                      * DONE
    * similarly drop iv2 from the server's reply to the client          * DONE

2014-02-14
    * merge in anything useful from aes_cnx.go                          * DONE

2014-02-13
    * xlattice_go/msg/helloAndReply{,_test}.go move here                * DONE

2013-11-22
    * consider building a code generator 
